# -------------------------------------------------------------------------- #
# Copyright 2010, University of Chicago                                      #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# RECIPE: Organization users
#
# This recipe creates the users in an organization. It additionally also
# creates accounts for users from other organizations who will be using
# the organization's resources via the grid.
#
# This recipe must be run on the same node as the nis_server recipe.
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class Chef::Resource
  include FileHelper
end

class Chef::Recipe
  include MiscHelper
end

# Necessary to create users
package "libshadow-ruby1.8" do
  action :install
end

# The org attribute is part of the generated topology.rb file,
# and contains the name of the organization this node belongs to.
org = node[:org]

# The orgusers attribute is part of the generated topology.rb file,
# and contains information on an organization's user (username,
# whether the user is a grid user or not, etc.)
users = node[:orgusers][org]


# We start by creating the organization's users.
usernum = 1
users.each do |u|
	# Create the user
	user u[:login] do
	  not_if "id #{u[:login]}"
	  comment u[:description]
	  uid 2000 + usernum
	  gid 100
	  home "/nfs/home/#{u[:login]}"
	  password u[:password_hash]
	  shell "/bin/bash"
	  supports :manage_home => true
	end

	# Create passwordless SSH keys
	execute "ssh-keygen" do
	  not_if do File.exists?("/nfs/home/#{u[:login]}/.ssh/id_rsa") end
	  user u[:login]
	  command "ssh-keygen -N \"\" -f /nfs/home/#{u[:login]}/.ssh/id_rsa"
	  action :run
	end
	
	# Add the user's public key to its authorized_keys, so the user
	# can SSH into other nodes in the organization.
        execute "add-key" do
          user u[:login]
          command "cat /nfs/home/#{u[:login]}/.ssh/id_rsa.pub > /nfs/home/#{u[:login]}/.ssh/authorized_keys"
          action :run
        end

	# Various environment variables required by some of the grid tools.
	ruby_block "add_lines" do
	  profile = "/nfs/home/#{u[:login]}/.profile"
	  block do
	    add_line(profile, "export MYPROXY_SERVER=#{node[:auth]}")
	    add_line(profile, "export GLOBUS_LOCATION=#{node[:globus][:dir]}")
	    add_line(profile, "export OPAL_PREFIX=#{node[:openmpi][:dir]}")
	    add_line(profile, "export LD_LIBRARY_PATH=$OPAL_PREFIX/lib")
	    add_line(profile, "PATH=$GLOBUS_LOCATION/bin:$OPAL_PREFIX/bin:$PATH")
	    add_line(profile, "if [ -f \"$GLOBUS_LOCATION/etc/globus-user-env.sh\" ] ; then . $GLOBUS_LOCATION/etc/globus-user-env.sh; fi")
	  end
	end
	usernum += 1
end

# If we specified that this organization's users will use certificates
# for authentication, then we need to copy the certificate and key
# into their .globus directory.
# Note that the certificates themselves are generated by demogrid-prepare
users.select{|u| u[:auth_type] == :certs}.each do |u|
	directory "/nfs/home/#{u[:login]}/.globus" do
	  owner u[:login]
	  group "users"
	  mode "0755"
	  action :create
	end

	cookbook_file "/nfs/home/#{u[:login]}/.globus/usercert.pem" do
	  source "#{u[:login]}_cert.pem"
	  mode 0644
	  owner u[:login]
	  group "users"
	end

	cookbook_file "/nfs/home/#{u[:login]}/.globus/userkey.pem" do
	  source "#{u[:login]}_key.pem"
	  mode 0400
	  owner u[:login]
	  group "users"
	end
end


# Now we create accounts for users in other organizations that will be accessing
# this organization's resources via the grid. These are the accounts that these
# users will be mapped to when they run a job, access GridFTP, etc.
# For example, if organization "b" has a user called "b-user1", its account on this
# organization would be "dg-b-user1".


# Create a group for these users
group "gridusers" do
  gid 3000
end

# We only want to create accounts for users in other orgs
other_orgs = node[:orgusers].select{|k,v| k != org}

usernum = 1
other_orgs.each do |other_org,users|
	# Only create an account for "grid-enabled" users.
	users.select{|v| v[:gridenabled]}.each do |u|
		username = "dg-#{u[:login]}"
		user username do
		  not_if "id #{username}"
		  comment u[:description]
		  uid 3000 + usernum
		  gid 3000
		  home "/nfs/home/#{username}"
		  password "$1$hgem2sWa$LEi4WMBeQx8VitWAcd5qC1" # Password: user
		  shell "/bin/bash"
		  supports :manage_home => true
		end
		usernum += 1
	end
end


# We need to run this for changes to take effect in the NIS server.
execute "rebuild_yp" do
 user "root"
 group "root"
 command "make -C /var/yp"
 action :run
end
